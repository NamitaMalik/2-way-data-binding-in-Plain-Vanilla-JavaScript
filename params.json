{
  "name": "2 Way Data Binding in Plain Vanilla JavaScript",
  "tagline": "This repository explains how to do 2 way data binding in plain vanilla JavaScript.",
  "body": "# 2 Way Data Binding in Plain Vanilla JavaScript\r\n\r\n\r\nWhenever someone asks me about the advantages of **AngularJS** the first thing that simply comes into my mind is **2-way data binding**.\r\n\r\nFor those who still aren't aware about it, **2-way data binding** means when you change anything in your model, view gets updated and on changing anything in the view, model gets updated.\r\n\r\nEveryone who knows **Angular**(having worked on it) or in fact has worked upon any other **JavaScript** framework(missed working on it) would actually know the beauty of this feature.\r\n\r\nWell, now let's try to simply implement this feature in pur own plain vanilla **JavaScript**.\r\n\r\nLet us take 4 text boxes to easily demonstrate **2-way data binding**. Here is our small piece of **HTML** code:\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title>2 Way Data Binding</title>\r\n</head>\r\n<body>\r\nName: <input class=\"name\" type=\"text\">\r\n<input class=\"name\" type=\"text\">\r\n<hr />\r\nAge: <input class=\"age\" type=\"text\">\r\n<input class=\"age\" type=\"text\">\r\n<script src=\"2WayDataBinding.js\"></script>\r\n</body>\r\n</html>\r\n```\r\nNow, let's have a look at our magical **JavaScript** code which will do wonders for us:\r\n\r\n```JavaScript\r\nvar $scope = {};\r\n(function () {\r\n    var bindClasses = [\"name\", \"age\"];\r\n    var attachEvent = function (classNames) {\r\n        classNames.forEach(function (className) {\r\n            var elements = document.getElementsByClassName(className);\r\n            for (var index in elements) {\r\n                elements[index].onkeyup = function () {\r\n                    for (var index in elements) {\r\n                        elements[index].value = this.value;\r\n                    }\r\n                }\r\n            }\r\n            Object.defineProperty($scope, className, {\r\n                set: function (newValue) {\r\n                    for (var index in elements) {\r\n                        elements[index].value = newValue;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    attachEvent(bindClasses);\r\n})();\r\n```\r\nHere is a detailed explanation of the above snippet:\r\n\r\n1. We have taken the classes of the elements on which we need to apply **2-way Data Binding** in an array named ```bindClasses```.\r\n\r\n2. Then we have an ```attachEvent``` which basically iterates through the classes passed in array ```bindClasses```.\r\n\r\n3.  We are extracting all the elements by using their class names ```document.getElementsByClassName(className)```.\r\n\r\n4. Once the elements are extracted we are binding ```onkeyup``` event on it. When this event is triggered it calls a function which stores the current value inside the element.\r\n\r\nIn this way we are successfully able to implement **2-way Data Binding** on our HTML.\r\n\r\nBut how to update our **model**??\r\n\r\nHere is the explanation of the rest of the part of the code which actually updates the value in our model:\r\n\r\n1. We have used ```object.defineProperty``` to define a property of an object. Here our object is **$scope** and property is **className**.\r\n\r\n2. Then we have a **set** function which serves as **setter** of the property.\r\n\r\n3. So, if you do something like - ```$scope.name=\"Hari\"```, \"Hari\" would be passed as ```newValue```, which would ultimately replace the value being displayed on the view through the following piece of code ```elements[index].value = newValue```.\r\n\r\nHurray!! We have now implemented the **2-way Data Binding** successfully.\r\n\r\n| Please note that this is just a small piece of code demonstrating **2-way Data Binding** using **JavaScript** this code can be improved a lot on the basis of element type.e We can also have a **getter** function for getting the value in ```$scope.name```. But for the sake of simplicity I have deliberately avoided it.\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}